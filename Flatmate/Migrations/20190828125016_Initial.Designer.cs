// <auto-generated />
using System;
using Flatmate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Flatmate.Migrations
{
    [DbContext(typeof(FlatmateContext))]
    [Migration("20190828125016_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Flatmate.Models.EntityModels.PartialExpense", b =>
                {
                    b.Property<int>("TotalExpenseId");

                    b.Property<int>("UserId");

                    b.Property<int>("TeamId");

                    b.Property<bool>("Covered");

                    b.Property<double>("Value");

                    b.HasKey("TotalExpenseId", "UserId", "TeamId");

                    b.HasIndex("UserId", "TeamId");

                    b.ToTable("PartialExpenses");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.RecurringBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("ExpenseCategory")
                        .IsRequired();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("Frequency")
                        .IsRequired();

                    b.Property<DateTime?>("LastOccurenceDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Subject");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.ToTable("RecurringBills");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.RecurringBillPerTeamMember", b =>
                {
                    b.Property<int>("RecurringBillId");

                    b.Property<int>("UserId");

                    b.Property<int>("TeamId");

                    b.HasKey("RecurringBillId", "UserId", "TeamId");

                    b.HasIndex("UserId", "TeamId");

                    b.ToTable("RecurringBillAssignments");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.ScheduledEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsBlocking");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("ScheduledEvents");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.ScheduledEventUser", b =>
                {
                    b.Property<int>("ScheduledEventId");

                    b.Property<int>("UserId");

                    b.Property<int>("TeamId");

                    b.Property<bool>("IsOwner");

                    b.HasKey("ScheduledEventId", "UserId", "TeamId");

                    b.HasIndex("UserId", "TeamId");

                    b.ToTable("ScheduledEventUsers");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.SCOUserTeamAssignment", b =>
                {
                    b.Property<int>("SCOId");

                    b.Property<int>("UserId");

                    b.Property<int>("TeamId");

                    b.HasKey("SCOId", "UserId", "TeamId");

                    b.HasIndex("UserId", "TeamId");

                    b.ToTable("OrdersAssignments");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.SingleComplexOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("ExpenseCategory")
                        .IsRequired();

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.ToTable("ComplexOrders");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.SingleOrderElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<int>("SCOId");

                    b.Property<string>("Title");

                    b.Property<string>("Unit")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SCOId");

                    b.ToTable("OrderElements");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.TotalExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Covered");

                    b.Property<string>("ExpenseCategory")
                        .IsRequired();

                    b.Property<DateTime>("FinalizationDate");

                    b.Property<int>("OwnerId");

                    b.Property<string>("Subject");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("TotalExpenses");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.UserTeam", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("TeamId");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserPerTeams");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.PartialExpense", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.TotalExpense", "TotalExpense")
                        .WithMany("PartialExpenses")
                        .HasForeignKey("TotalExpenseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Flatmate.Models.EntityModels.UserTeam", "TeamMemberAssignment")
                        .WithMany("PartialExpenses")
                        .HasForeignKey("UserId", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.RecurringBillPerTeamMember", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.RecurringBill", "RecurringBill")
                        .WithMany("RecipientsCollection")
                        .HasForeignKey("RecurringBillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Flatmate.Models.EntityModels.UserTeam", "TeamMemberAssignment")
                        .WithMany("RecurringBillPerTeamMembers")
                        .HasForeignKey("UserId", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.ScheduledEventUser", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.ScheduledEvent", "ScheduledEvent")
                        .WithMany("AttachedUsersCollection")
                        .HasForeignKey("ScheduledEventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Flatmate.Models.EntityModels.UserTeam", "TeamMemberAssignment")
                        .WithMany("ScheduledEventUsers")
                        .HasForeignKey("UserId", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.SCOUserTeamAssignment", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.SingleComplexOrder", "SCO")
                        .WithMany("SCOTeamMemberAssignments")
                        .HasForeignKey("SCOId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Flatmate.Models.EntityModels.UserTeam", "UserTeam")
                        .WithMany("SCOUserTeamAssignments")
                        .HasForeignKey("UserId", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.SingleOrderElement", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.SingleComplexOrder", "SingleComplexOrder")
                        .WithMany("OrderElements")
                        .HasForeignKey("SCOId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.TotalExpense", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.User", "Owner")
                        .WithMany("TotalExpenses")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.UserTeam", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.Team", "Team")
                        .WithMany("UserAssignments")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Flatmate.Models.EntityModels.User", "User")
                        .WithMany("TeamAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
