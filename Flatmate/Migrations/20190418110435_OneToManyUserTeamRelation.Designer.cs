// <auto-generated />
using System;
using Flatmate.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Flatmate.Migrations
{
    [DbContext(typeof(FlatmateContext))]
    [Migration("20190418110435_OneToManyUserTeamRelation")]
    partial class OneToManyUserTeamRelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Flatmate.Models.EntityModels.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("ExpenseCategory");

                    b.Property<string>("ExpenseSubject");

                    b.Property<int>("InitiatorId");

                    b.Property<double>("Value");

                    b.HasKey("ExpenseId");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.ExpenseDebitor", b =>
                {
                    b.Property<int>("ExpenseId");

                    b.Property<int>("DebitorId");

                    b.HasKey("ExpenseId", "DebitorId");

                    b.HasIndex("DebitorId");

                    b.ToTable("ExpenseDebitor");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("InitiatorId");

                    b.Property<string>("OrderSubject");

                    b.HasKey("OrderId");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.OrderDebitor", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<int>("DebitorId");

                    b.HasKey("OrderId", "DebitorId");

                    b.HasIndex("DebitorId");

                    b.ToTable("OrderDebitor");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.RecurringBill", b =>
                {
                    b.Property<int>("RecurringBillId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillSubject");

                    b.Property<double>("Frequency");

                    b.Property<int>("InitiatorId");

                    b.Property<DateTime>("LastEffectiveDate");

                    b.Property<DateTime>("NextEffectiveDate");

                    b.Property<double>("Value");

                    b.HasKey("RecurringBillId");

                    b.HasIndex("InitiatorId");

                    b.ToTable("RecurringBills");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.RecurringBillDebitor", b =>
                {
                    b.Property<int>("RecurringBillId");

                    b.Property<int>("DebitorId");

                    b.HasKey("RecurringBillId", "DebitorId");

                    b.HasIndex("DebitorId");

                    b.ToTable("RecurringBillDebitor");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.ScheduledEvent", b =>
                {
                    b.Property<int>("ScheduledEventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Desription");

                    b.Property<int>("OwnerId");

                    b.Property<string>("Title");

                    b.HasKey("ScheduledEventId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ScheduledEvent");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.ScheduledEventUser", b =>
                {
                    b.Property<int>("ScheduledEventId");

                    b.Property<int>("UserId");

                    b.HasKey("ScheduledEventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ScheduledEventUser");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("TeamId");

                    b.HasKey("UserId");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.Expense", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.User", "Initiator")
                        .WithMany("InitializedExpensesCollection")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.ExpenseDebitor", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.User", "Debitor")
                        .WithMany("AttachedExpensesCollection")
                        .HasForeignKey("DebitorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Flatmate.Models.EntityModels.Expense", "Expense")
                        .WithMany("DebitorsCollection")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.Order", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.User", "Initiator")
                        .WithMany("InitializedOrdersCollection")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.OrderDebitor", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.User", "Debitor")
                        .WithMany("AttachedOrdersCollection")
                        .HasForeignKey("DebitorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Flatmate.Models.EntityModels.Order", "Order")
                        .WithMany("DebitorsCollection")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.RecurringBill", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.User", "Initiator")
                        .WithMany("InitializedRecurringBillsCollection")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.RecurringBillDebitor", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.User", "Debitor")
                        .WithMany("AttachedRecurringBillsCollection")
                        .HasForeignKey("DebitorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Flatmate.Models.EntityModels.RecurringBill", "RecurringBill")
                        .WithMany("DebitorsCollection")
                        .HasForeignKey("RecurringBillId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.ScheduledEvent", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.User", "Owner")
                        .WithMany("InitializedScheduledEvents")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.ScheduledEventUser", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.ScheduledEvent", "ScheduledEvent")
                        .WithMany("AttachedUsersCollection")
                        .HasForeignKey("ScheduledEventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Flatmate.Models.EntityModels.User", "User")
                        .WithMany("AttachedScheduledEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Flatmate.Models.EntityModels.User", b =>
                {
                    b.HasOne("Flatmate.Models.EntityModels.Team", "Team")
                        .WithMany("UsersCollection")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
